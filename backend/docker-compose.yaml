services:

  krakend:
    image: devopsfaith/krakend:2.4
    ports:
      - "8080:8080"
    volumes:
      - ./krakend/krakend.yaml:/etc/krakend/krakend.yaml
    command: [ "run", "-c", "/etc/krakend/krakend.yaml" ]
    depends_on:
      - auth-service
    networks:
      - backend

  auth-service:
    build:
      context: ./auth-service
    container_name: auth-service
    expose:
      - "8080"
    depends_on:
      - db-auth
      - liquibase-auth
    environment:
      - AUTH_SPRING_DATASOURCE_URL
      - AUTH_SPRING_DATASOURCE_USERNAME
      - AUTH_SPRING_DATASOURCE_PASSWORD
      - JWT_PRIVATE_KEY
      - JWT_PUBLIC_KEY
    networks:
      - auth-network
      - backend

  db-auth:
    image: postgres:16-alpine
    container_name: db-auth
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - db-auth-data:/var/lib/postgresql/data
    networks:
      - auth-network

  liquibase-auth:
    image: liquibase/liquibase:4.29
    container_name: liquibase-auth
    depends_on:
      - db-auth
    volumes:
      - ./auth-service/migrations:/changesets
    command:
      - --searchPath=/changesets
      - --changelog-file=changelog-master.yaml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://db-auth:5432/authdb
      - --username=postgres
      - --password=postgres
      - update
    networks:
      - auth-network

  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka
    expose:
      - "9092"
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CLUSTER_ID=cluster-kraft
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=3
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - backend

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    ports:
      - "15673:8080"
    networks:
      - backend

  task-service-postgres:
    image: postgres:16-alpine
    container_name: task-service-postgres
    ports:
      - "5433:5432"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${TASK_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TASK_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TASK_SERVICE_POSTGRES_DB}
    volumes:
      - task-service-postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${TASK_SERVICE_POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - task-service

  task-service-liquibase:
    image: liquibase:4.29
    container_name: task-service-liquibase
    depends_on:
      task-service-postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      LIQUIBASE_CLASSPATH: /liquibase/changelog
    volumes:
      - ./task-service/db/changelog:/liquibase/changelog
    command:
      [
        "--url=jdbc:postgresql://task-service-postgres:5432/${TASK_SERVICE_POSTGRES_DB}",
        "--username=${TASK_SERVICE_POSTGRES_USER}",
        "--password=${TASK_SERVICE_POSTGRES_PASSWORD}",
        "--changeLogFile=changelog/db-changelog-master.yml",
        "update"
      ]
    networks:
      - task-service

  task-service:
    build:
      context: ./task-service
      dockerfile: Dockerfile
    container_name: task-service
    ports:
      - "8080:8080"
    depends_on:
      - task-service-postgres
      - task-service-liquibase
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - task-service
      - backend

  local-rabbit-mq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend

  google-meeting-service:
    build:
      context: ./google-meeting-service
      dockerfile: Dockerfile
    expose:
      - 8080
    container_name: google-meeting-service
    env_file:
      - .env
    networks:
      - backend

  zoom-meeting-service:
    build:
      context: ./zoom-meeting-service
      dockerfile: Dockerfile
    expose:
      - 8080
    container_name: zoom-meeting-service
    env_file:
      - .env
    networks:
      - backend

volumes:
  kafka-data:
  task-service-postgres-data:
  db-auth-data:

networks:
  task-service:
    driver: bridge
  backend:
  auth-network:

