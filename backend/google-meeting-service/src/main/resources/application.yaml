app:
  rabbit:
    googleMeetQueue: googleMeetQueue
    meetingLinksQueue: meetingLinksQueue
    meetingCreateExchange: meetingCreateExchange
    meetingLinksExchange: meetingLinksExchange
    googleMeetRoutingKey: googleMeet
    meetingLinkRoutingKey: meetingLink

  google:
    oauth:
      principal-name: ${GOOGLE_OAUTH_PRINCIPAL_NAME}
      client-registration-id: ${GOOGLE_OAUTH_CLIENT_REGISTRATION_ID}


spring:
  application:
    name: GoogleMeetingService

  rabbitmq:
    port: 5672
    host: localhost
    username: user
    password: password

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
            - openid
            - profile
            - email
            - https://www.googleapis.com/auth/meetings.space.created
            redirect-uri: http://localhost:8080/login/oauth2/code/google
#        provider:
#          google:
#            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&prompt=consent
#            token-uri: https://oauth2.googleapis.com/token
#            user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
#            user-name-attribute: sub


  datasource:
    url: jdbc:postgresql://localhost:5434/oauth2db
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true


  liquibase:
    enabled: false

server:
  port: 8080
